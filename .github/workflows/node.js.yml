name: New github actiontesting 

on: 
  push: 
    branches: [ "main", "dev", "qa" ]
  pull_request:
    branches: [ "main", "dev", "qa" ]

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on : nonprod

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name : Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
    
      - name: Frontend Compilation (Syntax Check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Backend Compilation (Syntax Check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +
  
  gitleaks-scan:
    runs-on: nonprod
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Gitleaks Setup
        uses: gitleaks/gitleaks-action@v2

      - name: Gitleaks Scan
        run: |
          gitleaks detect --source ./client --exit-code 0
          gitleaks detect --source ./api --exit-code 0
  
  trivy_fs_scan:
    runs-on: nonprod
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'trivy-report.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          cache: 'true'
          exit-code: '0'
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

  sonar-frontend:
    if: github.ref == 'refs/heads/dev'
    runs-on: nonprod
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (client)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: client        # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_client
            -Dsonar.projectName=myorg_client
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  sonar-backend:
    if: github.ref == 'refs/heads/dev'
    runs-on: nonprod
    needs: sonar-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SonarQube Scan (api)
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: api           # ðŸ‘ˆ instead of working-directory
          args: >
            -Dsonar.projectKey=myorg_api
            -Dsonar.projectName=myorg_api
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  
  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api  
          push: true
          tags: praveen200497/backend:${{ env.IMAGE_TAG }}
          file: ./api/Dockerfile
  
  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: sonar-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: praveen200497/frontend:${{ env.IMAGE_TAG }}
          file: ./client/Dockerfile
  
  trivy_image_scan:
    if: github.ref == 'refs/heads/dev'
    runs-on: nonprod
    needs: build_frontend_docker_image_and_push   # or whatever job built/pushed your image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy image scan for backend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: praveen200497/backend:${{ env.IMAGE_TAG }}
          format: table
          exit-code: '0'                 
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          
      - name: Run Trivy image scan for frontend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image               # ðŸ‘ˆ scan container image
          image-ref: praveen200497/frontend:${{ env.IMAGE_TAG }}
          format: table
          exit-code: '0'              
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
  
  update_cd_repo:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: trivy_image_scan
    steps:
      - name: Checkout CD repository
        uses: actions/checkout@v4
        with:
          repository: praveenveenath/3-Tier-GitHub-cd
          ref: main                     # ðŸ‘ˆ branch to checkout
          token: ${{ secrets.CD_REPO_TOKEN }}   # ðŸ‘ˆ token with write access to the CD repo
          path: cd
      - name: Update Kubernetes manifests with new image tags
        run: |
          cd
          sed -i 's|praveen200497/backend:.*|praveen200497/backend:${{ env.IMAGE_TAG }}|g' k8s-prod/backend.yaml
          sed -i 's|praveen200497/frontend:.*|praveen200497/frontend:${{ env.IMAGE_TAG }}|g' k8s-prod/frontend.yaml
          git config --global user.name 'praveen200497'
          git config --global user.email 'praveen200497@gmail.com"
          git add k8s-prod/backend.yaml k8s-prod/frontend.yaml
          git commit -m "Update image tags to ${{ env.IMAGE_TAG }}"
          git push origin HEAD:main

          
  # deploy_to_kubernetes:
  #   runs-on: nonprod
  #   needs: trivy_image_scan
  #   steps:
  #   - name: Checkout Code
  #     uses: actions/checkout@v4
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ap-south-1
  #   - name: Set up kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: latest
  #   - name: Update kubeconfig
  #     run: aws eks update-kubeconfig --region ap-south-1 --name ekstesting
  #   - name: Deploy to EKS
  #     run: |
  #       kubectl apply -f k8s-prod/sc.yaml 
  #       kubectl apply -f k8s-prod/mysql.yaml 
  #       kubectl apply -f k8s-prod/backend.yaml 
  #       kubectl apply -f k8s-prod/frontend.yaml 
        